TestCase subclass: #AlgoFixTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:23'!test05PresupuestoPinteoresConPincelRodilloOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(20 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(20 "M2" * 4 "litros" * 340 "Precio" * 1 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:20'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura	"		"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(10 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(10 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:24'!test07PresupuestoPinteoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperadoConAlba := algoFix  		manoDeObra: 			(55 "M2" * 2 "horas" * 500 "Precio" * 2 "manos" * 0.5) 		masMateriales: 			(55 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:20'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 130 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 20 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:20'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 16:14'!setUp	precision := 0.001! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:23'!test08PresupuestoConTecnicaPincel	| algoFix alba venier presupuesto valorEsperadoConAlba valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperadoConAlba := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	valorEsperadoConVenier := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:21'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		valorEsperadoConVenier := algoFix 		manoDeObra: 			(15 "M2" * 2 "horas" * 500 "Precio" * 2 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Martin' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Catedra' stamp: 'tomas 5/12/2020 17:20'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda 2 horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva 4 litros de pintura	"	"Pinturas:		- Alba   requiere '1' mano con pincel y '1' mano con rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 22:36'!test11PresupuestoDeUnPintorConPincelOfreceDescuentoPintandoMasDe40M2	| algoFix alba  presupuesto25M2 presupuesto50M2 valor25M2 valor50M2 |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 2 manosRodillo: 1.	presupuesto25M2 := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 25 conPintura: alba.	valor25M2 := presupuesto25M2 valor.	presupuesto50M2 := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 50 conPintura: alba.	valor50M2 := presupuesto50M2 valor.			self assert: (valor50M2 < (2*valor25M2))! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 23:03'!test14AlIntentarRegistrarUnPintorSinNombreDeberiaLanzarUnaExcepcion 	| algoFix |	algoFix := AlgoFix new.	self should:[algoFix registrarPintorDePincel: '' conValorHora: 500]	raise: ValorInvalidoError .		! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 22:58'!test13AlIntentarCrearUnPresupuestoSinPintoresDeberiaLanzarUnaExcepcion 	|unaPintura  algoFix|	algoFix := AlgoFix new.	unaPintura := algoFix crearPintura: 'Alba' conPrecioPorLitro:100  manosPincel:1  manosRodillo:1. 	self should:[algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: unaPintura]	raise: NoHayPintoresError .		! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 23:17'!test15AlIntentarCrearUnaPinturaConPrecioPorLitroMenorOIgualACeroDeberiaLanzarUnaExcepcion 	| algoFix |	algoFix := AlgoFix new.	self should:[algoFix crearPintura: 'Alba' conPrecioPorLitro:-100  manosPincel:1  manosRodillo:1]	raise: ValorInvalidoError .		! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 23:25'!test16AlIntentarCrearUnaPinturaConPrecioPorLitroMenorOIgualACeroDeberiaLanzarUnaExcepcion 	| algoFix |	algoFix := AlgoFix new.	self should:[algoFix crearPintura: 'Alba' conPrecioPorLitro:0  manosPincel:1  manosRodillo:1]	raise: ValorInvalidoError .		! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 22:57'!test12PresupuestoConVariosPintoresConElMismoValorDePresupuestoElResponsableEsElPrimeroRegistrado 	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.		algoFix registrarPintorDePincel: 'Tomas' conValorHora: 750.	algoFix registrarPintorDeRodillo: 'Bruno' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Joaquin' conValorHora: 750.	algoFix registrarPintorDePincel: 'Edson' conValorHora: 800.	algoFix registrarPintorDeRodillo: 'Lucas' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Andres' conValorHora: 1600.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(15 "M2" * 1 "horas" * 600 "Precio" * 1 "manos") 		masMateriales: 			(15 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Bruno' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 23:11'!test09PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 600.	algoFix registrarPintorDePincel: 'Edson' conValorHora: 800.	algoFix registrarPintorDePincel: 'Tomas' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(15 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Tomas' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'Alumno' stamp: 'Joaquin 5/25/2020 23:13'!test10PresupuestoConVariosPintoresConPinturaAlbaOfreceElMenorPresupuestoElDeRodillo	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 600.	algoFix registrarPintorDePincel: 'Edson' conValorHora: 800.	algoFix registrarPintorDePincel: 'Tomas' conValorHora: 750.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(15 "M2" * 1 "horas" * 600 "Precio" * 1 "manos") 		masMateriales: 			(15 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !TestCase subclass: #PincelTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:11'!test09CreoUnPincelConsultoAUnaPinturaLaCantidadDeManosDePinturaAUsarDeberiaSer2	"arrange"	|unPincel cantidadManos unaPintura|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"act"	cantidadManos := unPincel manos:unaPintura.	"assert"	self assert: cantidadManos equals:2.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:00'!test17ConUnPincelAlIntentarCalcularElCostoDeLaPinturaAUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unPincel unaPintura|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unPincel calcularCostoPintura: 0 con: unaPintura ]		raise: ValorInvalidoError .! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:59'!test12ConUnPincelAlIntentarCalcularElTiempoDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion|unPincel|	unPincel := Pincel new.	self should:[unPincel calcularTiempo:-8]		raise: ValorInvalidoError .! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:00'!test14ConUnPincelAlIntentarCalcularElConsumoDePinturaDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unPincel|	unPincel := Pincel new.	self should:[unPincel calcularConsumoPintura: -9]		raise: ValorInvalidoError .! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 14:45'!test04CreoUnPincelCalculoElConsumoDePinturaParaPintar50M2DeberiaSer200	"arrange"	|unPincel consumoPintura|	unPincel := Pincel new.	"act"	consumoPintura := unPincel calcularConsumoPintura: 50.	"assert"	self assert: consumoPintura equals:200.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:12'!test10CreoUnPincelConsultoAUnaPinturaLaCantidadDeManosDePinturaAUsarDeberiaSer5	"arrange"	|unPincel cantidadManos unaPintura|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 5 manosRodillo: 1.	"act"	cantidadManos := unPincel manos:unaPintura.	"assert"	self assert: cantidadManos equals:5.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:44'!test11ConUnPincelAlIntentarCalcularElTiempoDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion|unPincel|	unPincel := Pincel new.	self should:[unPincel calcularTiempo:0]		raise: ValorInvalidoError .! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:00'!test16ConUnPincelAlIntentarAplicarUnDescuentoAUnCostoMenorOIgualACeroDeberiaLanzarUnaExcepcion	|unPincel|	unPincel := Pincel new.	self should:[unPincel aplicarDescuento:-3]		raise: ValorInvalidoError .! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:05'!test07CreoUnPincelCalculoElCostoParaPintarConUnaPinturaParticular10M2DeberiaSer8000	"arrange"	|unPincel precio unaPintura|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"act"	precio := unPincel calcularCostoPintura: 10 con:unaPintura.	"assert"	self assert: precio equals:8000.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 14:52'!test06CreoUnPincelAplicoUnDescuentoParaUnCostoDe250ElPrecioFinalDeberiaSer125	"arrange"	|unPincel precioFinal|	unPincel := Pincel new.	"act"	precioFinal := unPincel aplicarDescuento:250.	"assert"	self assert: precioFinal equals:125.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:59'!test15ConUnPincelAlIntentarAplicarUnDescuentoAUnCostoMenorOIgualACeroDeberiaLanzarUnaExcepcion	|unPincel|	unPincel := Pincel new.	self should:[unPincel aplicarDescuento:0]		raise: ValorInvalidoError .! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 14:44'!test03CreoUnPincelCalculoElConsumoDePinturaParaPintar10M2DeberiaSer40	"arrange"	|unPincel consumoPintura|	unPincel := Pincel new.	"act"	consumoPintura := unPincel calcularConsumoPintura: 10.	"assert"	self assert: consumoPintura equals:40.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 14:37'!test02CreoUnPincelCalculoElTiempoParaPintar50M2DeberiaSer100	"arrange"	|unPincel tiempo|	unPincel := Pincel new.	"act"	tiempo := unPincel calcularTiempo: 50.	"assert"	self assert: tiempo equals:100.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:06'!test08CreoUnPincelCalculoElCostoParaPintarConUnaPinturaParticular40M2DeberiaSer32000	"arrange"	|unPincel precio unaPintura|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"act"	precio := unPincel calcularCostoPintura: 40 con:unaPintura.	"assert"	self assert: precio equals:32000.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 14:25'!test01CreoUnPincelCalculoElTiempoParaPintar10M2DeberiaSer20	"arrange"	|unPincel tiempo|	unPincel := Pincel new.	"act"	tiempo := unPincel calcularTiempo: 10.	"assert"	self assert: tiempo equals:20.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:00'!test18ConUnPincelAlIntentarCalcularElCostoDeLaPinturaAUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unPincel unaPintura|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unPincel calcularCostoPintura: -10 con: unaPintura ]		raise: ValorInvalidoError .! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 14:52'!test05CreoUnPincelAplicoUnDescuentoParaUnCostoDe100ElPrecioFinalDeberiaSer50	"arrange"	|unPincel precioFinal|	unPincel := Pincel new.	"act"	precioFinal := unPincel aplicarDescuento:100.	"assert"	self assert: precioFinal equals:50.	! !!PincelTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 15:59'!test13ConUnPincelAlIntentarCalcularElConsumoDePinturaDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unPincel|	unPincel := Pincel new.	self should:[unPincel calcularConsumoPintura:  0]		raise: ValorInvalidoError .! !TestCase subclass: #PintorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 00:56'!test11AlIntentarCalcularElCostoTotalDeUnTrabajoConM2MenorOIgualACeroSeDeberiaLanzarUnaExcepcion	|unaPintura unPintor unPincel|	unPincel := Pincel new.	unPintor := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.		self should:[unPintor costoTotalTrabajoPara: -100 con: unaPintura]		raise: ValorInvalidoError .			! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 23:48'!test05CreoUnPintorConPincelYCalculoElValorDePintar50M2ConUnaPinturaComoSeAplicaDescuentoSaleMenos	"Arrange"	|unaPintura costo50M2 costo25M2 unPintorConPincel unPincel|	unPincel := Pincel new.	unPintorConPincel := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo25M2 := unPintorConPincel costoTotalTrabajoPara: 25 con: unaPintura.			costo50M2 :=	 unPintorConPincel costoTotalTrabajoPara: 50 con: unaPintura.		"Assert"	self deny: costo50M2 closeTo: (costo25M2*2).! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 23:39'!test03CreoUnPintorConPincelYCalculoElValorDePintar20M2ConUnaPintura	"Arrange"	|unaPintura costo unPintorConPincel unPincel|	unPincel := Pincel new.	unPintorConPincel := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unPintorConPincel costoTotalTrabajoPara: 20 con: unaPintura.			"Assert"	self assert: costo equals: 32000.! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 00:55'!test10AlIntentarCalcularElCostoTotalDeUnTrabajoConM2MenorOIgualACeroSeDeberiaLanzarUnaExcepcion	|unaPintura unPintor unPincel|	unPincel := Pincel new.	unPintor := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.		self should:[unPintor costoTotalTrabajoPara: 0 con: unaPintura]		raise: ValorInvalidoError .			! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 23:34'!test01CreoUnPintorConRodilloYCalculoElValorDePintar20M2ConUnaPintura	"Arrange"	|unaPintura costo unPintorConRodillo unRodillo|	unRodillo := Rodillo new.	unPintorConRodillo := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unRodillo.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unPintorConRodillo costoTotalTrabajoPara: 20 con: unaPintura.			"Assert"	self assert: costo equals: 14000.! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 23:34'!test02CreoUnPintorConRodilloYCalculoElValorDePintar100M2ConUnaPintura	"Arrange"	|unaPintura costo unPintorConRodillo unRodillo|	unRodillo := Rodillo new.	unPintorConRodillo := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unRodillo.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unPintorConRodillo costoTotalTrabajoPara: 100 con: unaPintura.			"Assert"	self assert: costo equals: 70000.! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 00:50'!test08AlIntentarCrearUnPintorConValorPorHoraMenorOIgualACeroSeDeberiaLanzarUnaExcepcion	self should:[Pintor conNombre:'Diego' conValorHora:0 conHerramienta:Pincel new.]		raise: ValorInvalidoError .! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 23:40'!test04CreoUnPintorConPincelYCalculoElValorDePintar30M2ConUnaPintura	"Arrange"	|unaPintura costo unPintorConPincel unPincel|	unPincel := Pincel new.	unPintorConPincel := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unPintorConPincel costoTotalTrabajoPara: 30 con: unaPintura.			"Assert"	self assert: costo equals: 48000.! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 00:50'!test09AlIntentarCrearUnPintorConValorPorHoraMenorOIgualACeroSeDeberiaLanzarUnaExcepcion	self should:[Pintor conNombre:'Diego' conValorHora:-200 conHerramienta:Pincel new.]		raise: ValorInvalidoError .! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 23:49'!test06CreoUnPintorConPincelYCalculoElValorDePintar70M2ConUnaPinturaComoSeAplicaDescuentoSaleMenos	"Arrange"	|unaPintura costo70M2 costo35M2 unPintorConPincel unPincel|	unPincel := Pincel new.	unPintorConPincel := Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo35M2 := unPintorConPincel costoTotalTrabajoPara: 35 con: unaPintura.			costo70M2 :=	 unPintorConPincel costoTotalTrabajoPara: 70 con: unaPintura.		"Assert"	self deny: costo70M2 closeTo: (costo35M2*2).! !!PintorTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 00:23'!test07AlIntentarCrearUnPintorSinNombreSeDeberiaLanzarUnaExcepcion	self should:[Pintor conNombre:'' conValorHora: 100  conHerramienta:Rodillo new  ]		raise: ValorInvalidoError .	! !TestCase subclass: #PinturaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:15'!test13AlIntentarCalcularElCostoConRodilloDeUnaCantidadDeLitroMenorOIgualACeroDeberiaLanzarUnaExcepcion 	|unaPintura|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unaPintura calcularCostoConRodillo: 0]		raise: ValorInvalidoError  .! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:16'!test16AlIntentarCalcularElCostoConPincelDeUnaCantidadDeLitroMenorOIgualACeroDeberiaLanzarUnaExcepcion 	|unaPintura|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unaPintura calcularCostoConPincel: -100]		raise: ValorInvalidoError .! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:07'!test01CreoUnaPinturaYCalculoElValorDePintarCincoLitrosConRodilloDeberiaCostar500	"Arrange"	|unaPintura costo|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unaPintura calcularCostoConRodillo: 5.	"5 litros * 100 pesos por litro * 1 manos"	"Assert"	self assert: costo equals: 500.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:12'!test09AlCrearUnaPinturaConManosDeRodilloMenorIgualACeroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 0]		raise: ValorInvalidoError.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:10'!test06AlCrearUnaPinturaConPrecioPorLitroMenorIgualACeroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: -4 manosPincel: 2 manosRodillo: 1]		raise: ValorInvalidoError.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:10'!test07AlCrearUnaPinturaConManosDePincelMenorIgualACeroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 0 manosRodillo: 1] 		raise: ValorInvalidoError.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 01:44'!test05AlCrearUnaPinturaConPrecioPorLitroMenorIgualACeroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: 0 manosPincel: 2 manosRodillo: 1]		raise: ValorInvalidoError.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:14'!test11AlCrearUnaPinturaConManosDeRodilloConValorNoEnteroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.5]		raise: ManosNoEnterasError .! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:10'!test08AlCrearUnaPinturaConManosDePincelMenorIgualACeroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel:-5 manosRodillo: 1] 		raise: ValorInvalidoError.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:15'!test14AlIntentarCalcularElCostoConRodilloDeUnaCantidadDeLitroMenorOIgualACeroDeberiaLanzarUnaExcepcion 	|unaPintura|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unaPintura calcularCostoConRodillo:-50]		raise: ValorInvalidoError  .! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:08'!test03CreoUnaPinturaYCalculoElValorDePintarCincoLitrosConPincelDeberiaCostar1000	"Arrange"	|unaPintura costo|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unaPintura calcularCostoConPincel: 5.	"5 litros * 100 pesos por litro * 2 manos"	"Assert"	self assert: costo equals: 1000.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:09'!test04CreoUnaPinturaYCalculoElValorDePintarVeinteLitrosConPincelDeberiaCostar4000	"Arrange"	|unaPintura costo|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unaPintura calcularCostoConPincel: 20.	"20 litros * 100 pesos por litro * 2 manos"	"Assert"	self assert: costo equals: 4000.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:12'!test10AlCrearUnaPinturaConManosDeRodilloMenorIgualACeroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: -9]		raise: ValorInvalidoError.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:08'!test02CreoUnaPinturaYCalculoElValorDePintarVeinteLitrosConRodilloDeberiaCostar2000	"Arrange"	|unaPintura costo|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"Act"	costo := unaPintura calcularCostoConRodillo: 20.	"20 litros * 100 pesos por litro * 1 manos"	"Assert"	self assert: costo equals: 2000.! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:16'!test15AlIntentarCalcularElCostoConPincelDeUnaCantidadDeLitroMenorOIgualACeroDeberiaLanzarUnaExcepcion 	|unaPintura|	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unaPintura calcularCostoConPincel: 0]		raise: ValorInvalidoError .! !!PinturaTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:15'!test12AlCrearUnaPinturaConManosDePincelConValorNoEnteroDeberiaLanzarUnaExcepcion 	self should:[Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2.5 manosRodillo: 1]		raise: ManosNoEnterasError .! !TestCase subclass: #PresupuestoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 16:08'!test08AlIntentarCrearUnPresupuestoConValorDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unaPintura pintores unRodillo|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	pintores := OrderedCollection new.	pintores add:(Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unRodillo).		self should:[Presupuesto paraMetrosCuadrados: -100 conPintura:unaPintura yPintores:pintores ]		raise: ValorInvalidoError .	! !!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 15:49'!test05CreoUnPresupuestoConVariosPintoresElValorDeberiaSerElDeMenorCosto	"Arrange"	|unaPintura pintores unPincel valorTotal unPresupuesto unRodillo|	unPincel := Pincel new.	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	pintores := OrderedCollection new.	pintores add:(Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unRodillo).	pintores add:(Pintor conNombre:'Pablo' conValorHora:4200 conHerramienta:unPincel).	pintores add:(Pintor conNombre:'Eugenio' conValorHora:1200 conHerramienta:unRodillo).	pintores add:(Pintor conNombre:'Tomas' conValorHora:9200 conHerramienta:unPincel).	"Exagero los valores por hora para que el costo de Diego sea el menor"	unPresupuesto := Presupuesto paraMetrosCuadrados: 10 conPintura:unaPintura yPintores:pintores.	"Act"	valorTotal := unPresupuesto valor.	"Assert"	self assert: valorTotal equals: 7000.			 ! !!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 15:32'!test03CreoUnPresupuestoConVariosPintoresTodosTienenElMismoCostoElResponsableDeberiaSerQuienEsteAntesEnLaLista	"Arrange"	|unaPintura pintores unPincel nombreResponsable unPresupuesto|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	pintores := OrderedCollection new.	pintores add:(Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel).	pintores add:(Pintor conNombre:'Pablo' conValorHora:200 conHerramienta:unPincel).	pintores add:(Pintor conNombre:'Eugenio' conValorHora:200 conHerramienta:unPincel).	pintores add:(Pintor conNombre:'Tomas' conValorHora:200 conHerramienta:unPincel).	unPresupuesto := Presupuesto paraMetrosCuadrados: 10 conPintura:unaPintura yPintores:pintores.	"Act"	nombreResponsable := unPresupuesto responsable.	"Assert"	self assert: nombreResponsable equals: 'Diego'.			 ! !!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 15:29'!test01CreoUnPresupuestoConUnSoloPintorElResponsableDeberiaSerEl	"Arrange"	|unaPintura pintores unPincel nombreResponsable unPresupuesto|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	pintores := OrderedCollection new.	pintores add:(Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel).	unPresupuesto := Presupuesto paraMetrosCuadrados: 10 conPintura:unaPintura yPintores:pintores.	"Act"	nombreResponsable := unPresupuesto responsable.	"Assert"	self assert: nombreResponsable equals: 'Diego'.	 ! !!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 15:29'!test02CreoUnPresupuestoConVariosPintoresElResponsableDeberiaSerElDeMenorCosto	"Arrange"	|unaPintura pintores unPincel nombreResponsable unPresupuesto|	unPincel := Pincel new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	pintores := OrderedCollection new.	pintores add:(Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unPincel).	pintores add:(Pintor conNombre:'Pablo' conValorHora:4200 conHerramienta:unPincel).	pintores add:(Pintor conNombre:'Eugenio' conValorHora:1200 conHerramienta:unPincel).	pintores add:(Pintor conNombre:'Tomas' conValorHora:9200 conHerramienta:unPincel).	"Exagero los valores por hora para que el costo de Diego sea el menor"	unPresupuesto := Presupuesto paraMetrosCuadrados: 10 conPintura:unaPintura yPintores:pintores.	"Act"	nombreResponsable := unPresupuesto responsable.	"Assert"	self assert: nombreResponsable equals: 'Diego'.			 ! !!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 16:02'!test07AlIntentarCrearUnPresupuestoConValorDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unaPintura pintores unRodillo|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	pintores := OrderedCollection new.	pintores add:(Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unRodillo).	self should:[Presupuesto paraMetrosCuadrados: 0 conPintura:unaPintura yPintores:pintores ]		raise: ValorInvalidoError .	! !!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 15:51'!test06AlIntentarCrearUnPresupuestoSinPintoresDeberiaLanzarUnaExcepcion	|unaPintura pintores|	unaPintura := Pintura new.	pintores := OrderedCollection new.	self should:[Presupuesto paraMetrosCuadrados: 10 conPintura:unaPintura yPintores:pintores ]		raise: NoHayPintoresError.	! !!PresupuestoTest methodsFor: 'tests' stamp: 'Joaquin 5/25/2020 15:42'!test04CreoUnPresupuestoConUnSoloPintorElValorDeberiaSerElCostoDeEstePintor	"Arrange"	|unaPintura pintores unRodillo valorTotal unPresupuesto|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	pintores := OrderedCollection new.	pintores add:(Pintor conNombre:'Diego' conValorHora:200 conHerramienta:unRodillo).	unPresupuesto := Presupuesto paraMetrosCuadrados: 10 conPintura:unaPintura yPintores:pintores.	"Act"	valorTotal := unPresupuesto valor.	"Assert"	self assert: valorTotal equals: 7000.	 			 ! !TestCase subclass: #RodilloTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:31'!test11ConUnRodilloAlIntentarCalcularElTiempoDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion|unRodillo|	unRodillo := Rodillo new.	self should:[unRodillo calcularTiempo:0]		raise: ValorInvalidoError .! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:30'!test09CreoUnRodilloConsultoAUnaPinturaLaCantidadDeManosDePinturaAUsarDeberiaSer1	"arrange"	|unRodillo cantidadManos unaPintura|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 5 manosRodillo: 1.	"act"	cantidadManos := unRodillo manos:unaPintura.	"assert"	self assert: cantidadManos equals:1.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:31'!test10CreoUnRodilloConsultoAUnaPinturaLaCantidadDeManosDePinturaAUsarDeberiaSer9	"arrange"	|unRodillo cantidadManos unaPintura|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 5 manosRodillo: 9.	"act"	cantidadManos := unRodillo manos:unaPintura.	"assert"	self assert: cantidadManos equals:9.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:26'!test05CreoUnRodilloAplicoUnDescuentoParaUnCostoDe100ElPrecioFinalDeberiaSer100	"arrange"	|unRodillo precioFinal|	unRodillo := Rodillo new.	"act"	precioFinal := unRodillo aplicarDescuento:100.	"assert"	self assert: precioFinal equals:100.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:19'!test01CreoUnRodilloCalculoElTiempoParaPintar10M2DeberiaSer10	"arrange"	|unRodillo tiempo|	unRodillo := Rodillo new.	"act"	tiempo := unRodillo calcularTiempo: 10.	"assert"	self assert: tiempo equals:10.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:29'!test08CreoUnRodilloCalculoElCostoParaPintarConUnaPinturaParticular40M2DeberiaSer8000	"arrange"	|unRodillo precio unaPintura|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"act"	precio := unRodillo calcularCostoPintura: 40 con:unaPintura.	"assert"	self assert: precio equals:20000.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:31'!test12ConUnRodilloAlIntentarCalcularElTiempoDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion|unRodillo|	unRodillo := Rodillo new.	self should:[unRodillo calcularTiempo:-2]		raise: ValorInvalidoError .! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:24'!test03CreoUnRodilloCalculoElConsumoDePinturaParaPintar10M2DeberiaSer50	"arrange"	|unRodillo consumoPintura|	unRodillo := Rodillo new.	"act"	consumoPintura := unRodillo calcularConsumoPintura: 10.	"assert"	self assert: consumoPintura equals:50.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:26'!test06CreoUnRodilloAplicoUnDescuentoParaUnCostoDe250ElPrecioFinalDeberiaSer250	"arrange"	|unRodillo precioFinal|	unRodillo := Rodillo new.	"act"	precioFinal := unRodillo aplicarDescuento:250.	"assert"	self assert: precioFinal equals:250.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:33'!test16ConUnRodilloAlIntentarAplicarUnDescuentoAUnCostoMenorOIgualACeroDeberiaLanzarUnaExcepcion	|unRodillo |	unRodillo := Pincel new.	self should:[unRodillo aplicarDescuento:-1000]		raise: ValorInvalidoError .! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:34'!test18ConUnRodilloAlIntentarCalcularElCostoDeLaPinturaAUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unRodillo  unaPintura|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unRodillo calcularCostoPintura: -100 con: unaPintura ]		raise: ValorInvalidoError .! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:25'!test04CreoUnRodilloCalculoElConsumoDePinturaParaPintar50M2DeberiaSer250	"arrange"	|unRodillo consumoPintura|	unRodillo := Rodillo new.	"act"	consumoPintura := unRodillo calcularConsumoPintura: 50.	"assert"	self assert: consumoPintura equals:250.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:32'!test13ConUnRodilloAlIntentarCalcularElConsumoDePinturaDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unRodillo|	unRodillo := Rodillo new.	self should:[unRodillo calcularConsumoPintura:  0]		raise: ValorInvalidoError .! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:28'!test07CreoUnRodilloCalculoElCostoParaPintarConUnaPinturaParticular10M2DeberiaSer8000	"arrange"	|unRodillo precio unaPintura|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	"act"	precio := unRodillo calcularCostoPintura: 10 con:unaPintura.	"assert"	self assert: precio equals:5000.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:34'!test17ConUnRodilloAlIntentarCalcularElCostoDeLaPinturaAUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unRodillo  unaPintura|	unRodillo := Rodillo new.	unaPintura := Pintura conNombre: 'alba' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.	self should:[unRodillo calcularCostoPintura: 0 con: unaPintura ]		raise: ValorInvalidoError .! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:23'!test02CreoUnRodilloCalculoElTiempoParaPintar50M2DeberiaSer50	"arrange"	|unRodillo tiempo|	unRodillo := Rodillo new.	"act"	tiempo := unRodillo calcularTiempo: 50.	"assert"	self assert: tiempo equals:50.! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:33'!test15ConUnRodilloAlIntentarAplicarUnDescuentoAUnCostoMenorOIgualACeroDeberiaLanzarUnaExcepcion	|unRodillo |	unRodillo := Pincel new.	self should:[unRodillo aplicarDescuento:0]		raise: ValorInvalidoError .! !!RodilloTest methodsFor: 'tests' stamp: 'Joaquin 5/24/2020 16:33'!test14ConUnRodilloAlIntentarCalcularElConsumoDePinturaDeUnaCantidadDeM2MenorOIgualACeroDeberiaLanzarUnaExcepcion	|unRodillo|	unRodillo := Rodillo new.	self should:[unRodillo calcularConsumoPintura:  -5]		raise: ValorInvalidoError .! !